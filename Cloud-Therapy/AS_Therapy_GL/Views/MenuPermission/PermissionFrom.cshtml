@using System.Web.Services.Discovery
@using AS_Therapy_GL.Models
@model AS_Therapy_GL.Models.RoleModel

@{
    ViewBag.Title = "PermissionFrom";

    if (HttpContext.Current.Session["LoggedUserType"] == null)
    {
        Response.Redirect(Url.Action("Index", "Login"));
    }

    var LoggedUserTp = HttpContext.Current.Session["LoggedUserType"].ToString();
    var LoggedUserStatus = HttpContext.Current.Session["LoggedUserStatus"].ToString();

    if (LoggedUserTp == "AslSuperadmin" && LoggedUserStatus == "A")
    {

    }
    else
    {
        Response.Redirect(Url.Action("Index", "Logout"));
    }



    //var LoggedCompId = HttpContext.Current.Session["loggedCompID"].ToString();
    Therapy_GL_DbContext db = new Therapy_GL_DbContext();


    //User ID: [ ] , Login ID Field loaded in DropdownList
    //Int64 compid = Convert.ToInt64(System.Web.HttpContext.Current.Session["loggedCompID"]);
    List<SelectListItem> aslCompany = new List<SelectListItem>();
    var result = (from n in db.AslCompanyDbSet select n).ToList();
    //Int64 minUserID = Convert.ToInt64((from n in db.AslUsercoDbSet where n.COMPID == compid select n.USERID).Min());

    foreach (var n in result)
    {
        //AslUserco aslUserco = db.AslUsercoDbSet.FirstOrDefault(e => e.USERID == n.USERID && e.USERID != minUserID);
        //if (aslUserco != null)
        //{
        aslCompany.Add(new SelectListItem { Text = n.COMPNM, Value = n.COMPID.ToString() });
        //}

    }


    //Module Name:[ ] , Module Name Field Loaded in DropdownList
    List<SelectListItem> listModuleName = new List<SelectListItem>();
    var resultModule = (from n in db.AslMenumstDbSet select n).ToList();

    foreach (var n in resultModule)
    {
        ASL_MENUMST aslModuleId = db.AslMenumstDbSet.FirstOrDefault(e => e.MODULEID == n.MODULEID);
        if (aslModuleId != null)
        {
            listModuleName.Add(new SelectListItem { Text = aslModuleId.MODULENM.ToString(), Value = aslModuleId.MODULEID.ToString() });
        }
    }



    //Menu Type: [ ] , Menu Type Field Loaded in DropdownList
    List<SelectListItem> listMenu = new List<SelectListItem>();
    listMenu.Add(new SelectListItem { Text = "FORMS", Value = "F" });
    listMenu.Add(new SelectListItem { Text = "REPORTS", Value = "R" });

    //Menu Type: [ ] , Menu Type Field Loaded in DropdownList
    List<SelectListItem> listPermission = new List<SelectListItem>();
    listPermission.Add(new SelectListItem { Text = "Active", Value = "A" });
    listPermission.Add(new SelectListItem { Text = "Inactive", Value = "I" });

}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)

    @Html.HiddenFor(model => model.AslRole.USERID, new { id = "txtComapanyAdminID", @class = "form-control" })
    <div id="contentHeaderBox">
        <h1>Permission Menu for User List</h1>
    </div>
    <br />
    <div class="col-md-12">
        <div class="form-group">


            <div class="row">
                <div class="col-md-2">
                    @Html.Label("name", "Company Name", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-3">
                    @Html.DropDownListFor(model => model.AslCompany.COMPID, aslCompany, "--Select Login ID--", new { id = "txtCompanyName", @class = "form-control", autofocus = true })
                </div>
            </div>

            <br />

            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("name", "Module Name", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-3">
                    @Html.DropDownListFor(model => model.AslMenumst.MODULEID, listModuleName, "--Select Menu--", new { id = "txtModuleNm", @class = "form-control" })
                </div>
                <div class="col-md-2">
                    @Html.LabelFor(model => model.AslMenu.MENUTP, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-3">
                    @Html.DropDownListFor(model => model.AslMenu.MENUTP, listMenu, "--Select Menu--", htmlAttributes: new { id = "menuTypeID", @class = "form-control" })
                    @*@Html.ValidationMessageFor(model => model.AslMenu.MENUTP, "", new { @class = "text-danger" })*@
                </div>
                <div class="col-md-2">
                    <input type="submit" class="btn btn-info" value="Search" style="float: right;" />
                </div>
            </div>

            @if (ViewBag.ErrorFieldMessage != null)
            {

                <div class="row">
                    <div class="col-md-4"></div>
                    <div class="col-md-8">
                        <h6 style="color: #C03523">@ViewBag.ErrorFieldMessage<i style="color: #C03523" class="fa fa-question-circle fa-1x"></i></h6>
                    </div>
                </div>

            }
            @if (TempData["ErrorFieldMessage"] != null)
            {
                <div class="row">
                    <div class="col-md-4"></div>
                    <div class="col-md-8">
                        <h6 style="color: #C03523">@TempData["ErrorFieldMessage"]<i style="color: #C03523" class="fa fa-question-circle fa-1x"></i></h6>
                    </div>
                </div>
            }

            @Html.TextBoxFor(model => model.AslUserco.UPDLTUDE, new { id = "latlon", style = "display: none;" })
            <input id="lat" type="hidden" />
            <input id="lon" type="hidden" />
        </div>

        @if (TempData["message"] != null)
        {
            <br />
            <div class="text-center">
                <h4 style="color: #BD7F1C">@TempData["message"] </h4>
            </div>
        }
        <br />

        <div class="row">

            @if (TempData["AslRoleModel"] != null)
            {
                <div class="col-md-3"></div>
                <div class="col-md-9 text-center">
                    @Html.HiddenFor(model => model.AslRole.ASL_ROLEId, new { @readonly = "readonly" })
                    @Html.HiddenFor(model => model.AslRole.COMPID, new { @readonly = "readonly" })
                    @Html.HiddenFor(model => model.AslRole.USERID, new { @readonly = "readonly" })
                    @Html.HiddenFor(model => model.AslRole.MODULEID, new { @readonly = "readonly" })
                    @Html.HiddenFor(model => model.AslRole.MENUID, new { @readonly = "readonly" })
                    @Html.HiddenFor(model => model.AslRole.MENUTP, new { @readonly = "readonly" })
                    @Html.HiddenFor(model => model.AslRole.INSERTR, new { @readonly = "readonly" })
                    @Html.HiddenFor(model => model.AslRole.UPDATER, new { @readonly = "readonly" })
                    @Html.HiddenFor(model => model.AslRole.DELETER, new { @readonly = "readonly" })
                    <div class="col-md-4">
                        <span> @Html.Label("name", "Menu Name", htmlAttributes: new { @class = "control-label" })</span>
                        @Html.TextBoxFor(model => model.AslMenu.MENUNM, new { @class = "form-control input-sm", id = "txtMenuName", @readonly = "readonly" })
                    </div>
                    <div class="col-md-2">
                        <span>  @Html.Label("name", "Status", htmlAttributes: new { @class = "control-label" })</span>
                        @Html.DropDownListFor(model => model.AslRole.STATUS, listPermission, "-Select-", htmlAttributes: new { @class = "form-control input-sm" })
                    </div>
                    <div class="col-md-3"><br /><input type="submit" class="btn btn-info" value="Update" id="btnAdd" name="command" /></div>
                </div>


            }

        </div>
        <br />
        <div class="row">
            @*<div class="col-md-1"></div>*@
            @if (TempData["data"] != null)
            {
                var userId = Convert.ToInt64(TempData["userId"]);
                var menuTp = TempData["menuType"].ToString();


                String moduleID = Convert.ToString(TempData["moduleID"]);



                var res = db.AslRoleDbSet.Where(d => d.USERID == userId && d.MENUTP == menuTp && d.COMPID == Model.AslCompany.COMPID && d.MODULEID == moduleID).ToList();
                <div class="col-md-12">
                    <div class="table-responsive">
                        <table class="table table-striped">
                            <tr>
                                <td>
                                    <h6>Menu Name</h6>
                                </td>
                                <td>
                                    <h6>Status</h6>
                                </td>

                                <td></td>
                            </tr>

                            @foreach (var item in res)
                            {
                                <tr>
                                    @Html.HiddenFor(model => item.COMPID, new { @readonly = "readonly" })
                                    @Html.HiddenFor(model => item.USERID, new { @readonly = "readonly" })
                                    @Html.HiddenFor(model => item.ASL_ROLEId, new { @readonly = "readonly" })
                                    @Html.HiddenFor(model => item.MENUID, new { @readonly = "readonly" })
                                    @Html.HiddenFor(model => item.MENUTP, new { @readonly = "readonly" })
                                    @Html.HiddenFor(model => item.MODULEID, new { @readonly = "readonly" })
                                    @Html.HiddenFor(model => item.INSERTR, new { @readonly = "readonly" })
                                    @Html.HiddenFor(model => item.UPDATER, new { @readonly = "readonly" })
                                    @Html.HiddenFor(model => item.DELETER, new { @readonly = "readonly" })
                                    <td>
                                        @Html.DisplayFor(model => item.MENUNAME, new { style = "width:20em;", @readonly = "readonly" })
                                    </td>

                                    <td>
                                        @Html.DisplayFor(model => item.STATUS, new { style = "width:8em;", id = "txtItemNm", @readonly = "readonly" })
                                    </td>
                                    <td>
                                        <span>
                                            <a href="@Url.Action("EditRoleUpdate", new { asl_roleId = item.ASL_ROLEId, companyID = item.COMPID, moduleId = item.MODULEID, menuId = item.MENUID, userId = item.USERID, ForR =item.MENUTP })" class="btn btn-sm btn-info">
                                                <span class="glyphicon glyphicon-pencil"></span>
                                            </a>
                                        </span>


                                    </td>

                                </tr>

                            }

                        </table>
                    </div>
                </div>
            }
            else
            {

            }
            @*<div class="col-md-1"></div>*@
        </div>
    </div>

    //Latitute & longitude
    <script src="http://maps.google.com/maps/api/js?sensor=false"></script>

    <script language="javascript" type="text/javascript">
        $(function () {
            navigator.geolocation.getCurrentPosition(showPosition);
            //navigator.geolocation.getCurrentPosition(showPosition, positionError);

            function showPosition(position) {
                var coordinates = position.coords;
                $("#lat").val(coordinates.latitude);
                $("#lon").val(coordinates.longitude);

                $("#latlon").val(
                    $("#lat").val() + "," + $("#lon").val()
                );
            }
        });
    </script>

    <script type="text/javascript">
        $(function () {

            //1. User Name: [    ]
            $('#txtCompanyName').change(function () {
                //When the UserName (Dropdown list) changed then get the "User ID" from "ASLUSERCO" table
                var changedDropDown = $('#txtCompanyName option:selected').val();
                var txtComapanyAdminID = document.getElementById('txtComapanyAdminID');
                $("#txtComapanyAdminID").val(" ");
                $("#txtModuleNm").val("--Select Module--");
                $("#menuTypeID").val("--Select Menu--");



                $.getJSON(
                    "/MenuPermission/CompanyNameChanged", { "ChangedDropDown": changedDropDown },
                    function (myData) {
                        txtComapanyAdminID.value = myData.USERID;
                        document.getElementById("txtModuleNm").focus();
                    });

            });

            //2. Module Name: [    ]
            $("#txtModuleNm").change(function () {
                $("#menuTypeID").focus();
                // when the value of the Module Name field changes update the Dropdown list field
                $("#menuTypeID").val("--Select Menu--");

            });

        });
    </script>


}

<link href="~/Content/themes/base/jquery-ui.css" rel="stylesheet" />
<script src="~/Scripts/jquery-1.9.1.min.js"></script>
<script src="~/Scripts/jquery-ui-1.10.4.min.js"></script>